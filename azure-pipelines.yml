# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  - master

resources:
  - repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: "1c7a7ab1-d16c-487e-8d0a-9d45c74903c6"
  imageRepository: "authorizationservice"
  containerRegistry: "ctstrainingacr.azurecr.io"
  dockerfilePath: "$(Build.SourcesDirectory)/AuthorizationMicroservice/Dockerfile"
  tag: "$(Build.BuildId)"
  imagePullSecret: "ctstrainingacrd22d-auth"
  solution: 'AuthorizationMicroservice/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

  # Agent VM image name
  vmImageNameTest: "windows-latest"
  vmImageNameDeploy: "ubuntu-latest"

stages:
  - stage: Build
    displayName: Build stage
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: $(vmImageNameTest)
        steps:
          - task: NuGetToolInstaller@1
          - task: NuGetCommand@2
            inputs:
              restoreSolution: '$(solution)'
          - task: VSBuild@1
            inputs:
              solution: '$(solution)'
              msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'
              platform: '$(buildPlatform)'
              configuration: '$(buildConfiguration)'
          - task: VSTest@2
            displayName: "Server unit tests"
            inputs:
              testSelector: "testAssemblies"
              testAssemblyVer2: |
                **\AuthorizationMicroservice.*test*.dll
                !**\*TestAdapter.dll
                !**\obj\**
              searchFolder: "$(System.DefaultWorkingDirectory)"
              runTestsInIsolation: true
              codeCoverageEnabled: false
              platform: '$(buildPlatform)'
              configuration: '$(buildConfiguration)'
          - task: Docker@2
            displayName: Build and push an image to container registry
            inputs:
              command: buildAndPush
              repository: $(imageRepository)
              dockerfile: $(dockerfilePath)
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: |
                $(tag)

          - upload: manifests
            artifact: manifests

  - stage: Deploy
    displayName: Deploy stage
    dependsOn: Build

    jobs:
      - deployment: Deploy
        displayName: Deploy
        pool:
          vmImage: $(vmImageNameDeploy)
        environment: "isushantAuthorizationService.project"
        strategy:
          runOnce:
            deploy:
              steps:
                - task: KubernetesManifest@0
                  displayName: Create imagePullSecret
                  inputs:
                    action: createSecret
                    secretName: $(imagePullSecret)
                    dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

                - task: KubernetesManifest@0
                  displayName: Deploy to Kubernetes cluster
                  inputs:
                    action: deploy
                    manifests: |
                      $(Pipeline.Workspace)/manifests/deployment.yml
                      $(Pipeline.Workspace)/manifests/service.yml
                    imagePullSecrets: |
                      $(imagePullSecret)
                    containers: |
                      $(containerRegistry)/$(imageRepository):$(tag)
